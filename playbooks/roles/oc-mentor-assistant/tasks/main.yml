---
- name: Disable git owernship check
  community.general.git_config:
    name: safe.directory
    scope: global
    value: "{{ app_folder }}"

- name: Clone repository
  git:
    repo: "{{ git_repo_url }}"
    dest: "{{ app_folder }}"
    version: "{{ git_repo_version }}"
    force: yes
  register: git_output

- name: Set ownership of app folder
  become: true
  file:
    path: "{{ app_folder }}"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    recurse: yes
  when: git_output.changed

- name: Copy .env file
  template:
    src: templates/.env.j2
    dest: "{{ app_folder }}/.env"
  tags:
    - init

- name: set owernship of logs folder
  file:
    path: "{{ app_folder }}/logs"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    recurse: yes

- name: "Config poetry"
  become_user: "{{ app_user }}"
  shell:
    cmd: "{{ poetry_path }} config virtualenvs.in-project true"
  tags:
    - init

- name: Install application dependencies
  become_user: "{{ app_user }}"
  shell:
    cmd: "{{ poetry_path }} install -E server"
    chdir: "{{ app_folder }}"

- name: Get virtualenv path
  shell: 
    cmd: "{{ poetry_path }} env info --path"
    chdir: "{{ app_folder }}"
  register: venv_path_output

- set_fact:
    venv_path: "{{ venv_path_output.stdout }}"

- name: migrate database
  django_manage:
    command: migrate
    project_path: "{{ app_folder }}"
    virtualenv: "{{ venv_path }}"

- name: collect static files
  django_manage:
    command: collectstatic --noinput
    project_path: "{{ app_folder }}"
    virtualenv: "{{ venv_path }}"

- name: Check if django superuser exists
  django_manage:
    command: shell -c 'import sys; from django.contrib.auth.models import User; sys.exit(0 if User.objects.filter(username="{{ superuser_username }}").count() > 0 else 1)'
    project_path: "{{ app_folder }}"
    virtualenv: "{{ venv_path }}"
  register: checksuperuser
  ignore_errors: True
  changed_when: False
  tags:
    - init 

- name: django create superuser
  django_manage:
    command: "createsuperuser --noinput --username={{ superuser_username }} --email={{ superuser_email }}"
    app_path: "{{ app_folder }}"
    virtualenv: "{{ venv_path }}"
  environment:
    DJANGO_SUPERUSER_PASSWORD: "{{ superuser_password }}"
  when: checksuperuser.failed
  tags:
    - init

- name: Copy systemd socket file
  template:
    src: templates/gunicorn.socket.j2
    dest: /etc/systemd/system/{{ app_name }}.socket
  tags:
    - init

- name: Copy systemd service file
  template:
    src: templates/gunicorn.service.j2
    dest: /etc/systemd/system/{{ app_name }}.service
  tags:
    - init

- name: Enable gunicorn socket
  systemd:
    name: "{{ app_name }}.socket"
    state: started
    enabled: yes
    daemon_reload: yes
  tags:
    - init

- name: Check {{ app_name }} service status
  become: true
  systemd:
    name: "{{ app_name }}"
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: Configure NGINX
  become_user: "{{ app_user }}"
  template:
    src: templates/nginx.conf.j2
    dest: "/etc/nginx/sites-available/{{ app_name }}"
  tags:
    - init

- name: Create symbolic link for Nginx site
  file:
    src: "/etc/nginx/sites-available/{{ app_name }}"
    dest: "/etc/nginx/sites-enabled/{{ app_name }}"
    state: link
  tags:
    - init

- name: configure logs with filebeat
  template:
    src: templates/filebeat_input_config.j2
    dest: /etc/filebeat/inputs.d/{{ app_name }}.yml
  tags:
    - init

- name: Copy logstash configuration
  template:
    src: templates/logstash_filter.j2
    dest: /etc/logstash/conf.d/{{ app_name }}.conf
  tags:
    - init
  
- name: Restart Filebeat
  systemd:
    name: filebeat
    state: restarted
  tags:
    - init

- name: Restart Logstash
  systemd:
    name: logstash
    state: restarted
  tags:
    - init

- name: Reload NGINX
  service:
    name: nginx
    state: reloaded
